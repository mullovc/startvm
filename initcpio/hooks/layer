#!/usr/bin/ash
OFS_DIRS="/overlay"
OFS_COWSPACE="${OFS_DIRS}/cowspace"
OFS_UPPER="${OFS_COWSPACE}/upper"
OFS_WORK="${OFS_COWSPACE}/work"

run_hook() {
    # default mount handler is
    # mount ${rootfstype:+-t $rootfstype} -o ${rwopt:-ro}${rootflags:+,$rootflags} "$root" "/new_root"
    # make it into
    # mount -t overlay -o rw,lowerdir=<lowerk>:...:<lower2>:<lower1>,upperdir=<upper>,workdir=<work> "rootfs" "/new_root"

    # skip overlaying when there's no lower layers
    [ -n "$loweruuids" ] || return

    # XXX executing `echo $loweruuids | while read ...` will execute the
    #     while-loop in a subshell and discard the $rootflags value
    echo "$loweruuids" > /tmp/loweruuids
    # mount lower layers
    lowerdirs=
    while read -rd":" uuid
    do
        disk="$(blkid --uuid "$uuid")"
        [ -e "$disk" ] || continue

        lowerdir="$OFS_DIRS/$uuid"
        mkdir -p "$lowerdir"
        mount -o ro "$disk" "$lowerdir"
        if [ -d "$lowerdir/upper" ]; then
            lowerdirs="$lowerdir/upper:$lowerdirs"
        else
            lowerdirs="$lowerdir:$lowerdirs"
        fi
    done < /tmp/loweruuids

    rootflags="${rootflags:+$rootflags,}lowerdir=${lowerdirs%:}"

    # mount upper layer
    disk="$(blkid --uuid "$root")"
    mkdir -p "$OFS_COWSPACE"
    mount -o rw "$disk" "$OFS_COWSPACE"
    [ -d "$OFS_UPPER" ] || mkdir -p "$OFS_UPPER"
    [ -d "$OFS_WORK" ] || mkdir -p "$OFS_WORK"
    rootflags="$rootflags,upperdir=$OFS_UPPER,workdir=$OFS_WORK"

    # name of the merged overlay mount
    root="rootfs"
    rootfstype="overlay"
}

# vim: set ft=sh ts=4 sw=4 et:
